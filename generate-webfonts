#!/usr/bin/env python
import sys, re, os, os.path, subprocess
from subprocess import Popen, PIPE

BASE_DIR = os.path.dirname(__file__)
SFNTLY_PATHS = ['src/java', 'sfntly/java/build/classes']
SFNTLY_CLASSPATH = ':'.join(os.path.join(BASE_DIR, p) for p in SFNTLY_PATHS)

def escape(s):
    return s.replace('"', '\\"')

def devnull(mode='r'):
    return open(os.devnull, mode)

def fontforge_convert(finname, foutnames):
    with devnull() as out:
        p = Popen(['fontforge', '-lang=ff', '-script', '-'],
            stdin=PIPE, stdout=out, stderr=out)
        p.stdin.write('Open("%s")\n' % escape(finname))
        for foutname in foutnames:
            p.stdin.write('Generate("%s")\n' % escape(foutname))
        p.stdin.close()
        if p.wait() != 0:
            raise RuntimeError('fontforge conversion failed')

def sfntly_convert(finname, formats):
    r = subprocess.call([
        'java', '-cp', SFNTLY_CLASSPATH,
        'ConvertFont', '-f', ','.join(formats), finname
    ])
    if r != 0:
        raise RuntimeError('sfntly conversion failed')

def generate_css(foutname, **kwargs):
    # TODO include woff2
    with open(foutname, 'w') as fout:
        fout.write('''\
@font-face {
  font-family: '%(font_family)s';
  src: url('%(prefix)s%(basename)s.eot');
  src: url('%(prefix)s%(basename)s.eot?#iefix') format('embedded-opentype'),
       url('%(prefix)s%(basename)s.woff') format('woff'),
       url('%(prefix)s%(basename)s.ttf') format('truetype'),
       url('%(prefix)s%(basename)s.svg#%(svg_id)s') format('svg');
}
''' % kwargs)

def usage(out):
    out.write('''\
generate-webfonts [options] -o <output-dir> <font-file>

Convert a font to all necessary web formats and generate the appropriate CSS
rules.

Options:
-h --help     Show this help message.
-o --output   Output directory where converted files will go.
-p --prefix   Prefix of font paths used in the generated CSS. Default is
              the output directory.
-f --family   Font family name used in the generated CSS. Default is the base
              name of the input file.
-c --css      Alternate destination path for the generated CSS file.
''')

def main():
    args = sys.argv[:0:-1]
    input_filename = None
    output_dirname = None
    css_prefix = None
    css_font_family = None
    css_path = None
    while args:
        arg = args.pop()
        if arg == '-h' or arg == '--help':
            usage(sys.stdout)
            sys.exit(0)
        elif arg == '-o' or arg == '--output':
            output_dirname = args.pop()
        elif arg == '-p' or arg == '--prefix':
            css_prefix = args.pop()
        elif arg == '-f' or arg == '--family':
            css_font_family = args.pop()
        elif arg == '-c' or arg == '--css':
            css_path = args.pop()
        elif input_filename is None:
            input_filename = arg
        else:
            usage(sys.stderr)
            sys.exit(1)
    if input_filename is None or output_dirname is None:
        usage(sys.stderr)
        sys.exit(1)

    fontforge_formats = ['ttf', 'svg']
    sfntly_formats = ['woff', 'eot']

    input_dirname, input_basename = os.path.split(input_filename)
    input_base, input_ext = os.path.splitext(input_basename)

    if not os.path.isdir(output_dirname):
        os.makedirs(output_dirname)

    def output_path(f):
        return os.path.join(output_dirname, '%s.%s' % (input_base, f))

    fontforge_convert(
        input_filename,
        map(output_path, fontforge_formats)
    )

    sfntly_convert(
        output_path('ttf'),
        sfntly_formats
    )

    if css_path is None:
        css_path = output_path('css')
    if css_font_family is None:
        css_font_family = input_base
    if css_prefix is None:
        css_prefix = os.path.join(output_dirname, '')
    generate_css(
        css_path,
        basename=input_base,
        font_family=css_font_family,
        prefix=css_prefix,
        svg_id=input_base # TODO parse the SVG file for this
    )

if __name__ == '__main__':
    main()

